data(iris)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(aes(color = Species))
ggplot(iris, aes(x = Petal.Length, y = Petal.Width)) + geom_point(aes(color = Species))
set.seed(1111)
n <- nrow(iris)
t_idx <- sample(seq_len(n), size = round(0.7 * n))
traindata <- iris[t_idx,]
testdata <- iris[ - t_idx,]
install.packages(class)
install.packages("class")
library(class)
library(dplyr)
install.packages("dplyr")
library(class)
library(dplyr)
trainLabels <- traindata$Species
knnTrain <- traindata[, - c(5)]
knnTest <- testdata[, - c(5)]
kv <- round(sqrt(n))
kv
prediction <- knn(train = knnTrain, test = knnTest, cl = trainLabels, k = kv)
cm <- table(x = testdata$Species, y = prediction, dnn = c("實際", "預測"))
cm
knnaccuracy <- sum(diag(cm)) / sum(cm)
knnaccuracy
knnTrain$Species <- trainLabels
ggplot(knnTrain, aes(x = Petal.Length, y = Petal.Width)) + geom_point(aes(color = Species)) +
stat_density2d(aes(color = Species))
#測試組
knnTest$Species <- prediction
ggplot(knnTest, aes(x = Petal.Length, y = Petal.Width), n = 10) + geom_point(aes(color = Species)) +
stat_density2d(aes(color = Species), h = 0.6)
knnTrain$Species <- trainLabels
ggplot(knnTrain, aes(x = Petal.Length, y = Petal.Width)) + geom_point(aes(color = Species)) +
stat_density2d(aes(color = Species))
knnTest$Species <- prediction
ggplot(knnTest, aes(x = Petal.Length, y = Petal.Width), n = 10) + geom_point(aes(color = Species)) +
stat_density2d(aes(color = Species), h = 0.6)
library(readr)
dataset <- read_csv(NULL)
View(dataset)
library(readr)
dataset <- read_csv(NULL)
View(dataset)
library(readr)
BusinessCyclePredict <- read_csv("C:\\Users\\HsiaoWenHui\\Desktop\\BusinessCyclePredict.csv")
View(BusinessCyclePredict)
library(readr)
BusinessCyclePredict <- read_csv("C:\\Users\\HsiaoWenHui\\Desktop\\BusinessCyclePredict.csv")
View(BusinessCyclePredict)
View(knnTest)
View(testdata)
library("e1071")
library(mice)
library(arm)
library(caret)
BCP <- read.csv("/Users/Charlie/Desktop/BusinessCyclePredict 2.csv")
#-----------data-preprocessing------------------------
BCP$Cycle <- as.factor(BCP$Cycle)
BCP[,3:63] <- as.numeric(unlist(BCP[,3:63]))
BCP.new <- subset(BCP,select = c(2:64))#get rid of the date
#-----------use mice to deal with na value---------------
mice.data <- mice(BCP.new,
m = 3,           # 產生三個被填補好的資料表
maxit = 5,      # 迭代，建議小一點 不然跑很久 其實5就夠了
method = "cart",
seed = 188)      # 令抽樣每次都一樣
data1 <- complete(mice.data, 1) # 1st data
data2 <- complete(mice.data, 2) # 2nd data
data3 <-complete(mice.data, 3) # 3rd data
######################
p = 0.8
index = sample(2, nrow(data1), replace = TRUE, prob=c(p,1-p))
train = data1[index == 1,]
test = data1[index == 2,]
x <- subset(train, select = -Cycle)  #use 1st data as an example
y <- train$Cycle
#model <- svm(x, y,na.action = na.omit)
model <- svm(Cycle ~ ., data = train)
pred <- fitted(model)
table(pred,y) #pred <- predict(model, x, decision.values = TRUE)
confusionMatrix(train$Cycle,pred)
######
result <- predict(model, newdata = test, type = "response")
y1 <- test$Cycle
table(result,y1)
#######test的cycle拿掉#########
TestNoCycle <- subset(test, select = c(VAR01:VAR62))
resultNoCycle<- predict(model, newdata = TestNoCycle, type = "response")
resultNoCycle
View(BusinessCyclePredict)
require(datasets)  # source package
str(iris)          # check structure of iris
head(iris, n=6)
summary(iris)
require(ggplot2)
install package("ggplot2")
data <- data.frame(x=c(1,2,3,NA,5), y=c(4,5,3,NA,NA))
data
is.na(data)
table(is.na(data))
na.omit(data)
data[is.na(data[,"y"]), "y"] <- mean(data[,"y"], na.rm=T)
data
table(is.na(iris))
model <- lm(formula= Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, data=iris)
summary(model)
names(model)
model$residual
shapiro.test(model$residual)
require(car)
install package("car")
new.iris <- data.frame(Sepal.Width=3.456, Petal.Length=1.535, Petal.Width=0.341)
new.iris
predict(model, new.iris)
a.lm <- lm(Petal.Width~Species, data=iris)
anova(a.lm)
b.lm <- lm(Petal.Length~Species, data=iris)
anova(b.lm)
model <- lm(formula= Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, data=iris)
summary(model)
names(model)
model$residual
shapiro.test(model$residual)
new.iris <- data.frame(Sepal.Width=3.456, Petal.Length=1.535, Petal.Width=0.341)
new.iris
predict(model, new.iris)
model <- lm(formula= Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, data=iris)
summary(model)
new.iris <- data.frame(Sepal.Width=3.456, Petal.Length=1.535, Petal.Width=0.341)
new.iris
predict(model, new.iris)
